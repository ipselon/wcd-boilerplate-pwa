import get from 'lodash/get';
import set from 'lodash/set';

/**
 * This function is generated by Webcodesk. Replace this comment with a valuable description.
 *
 * @functionTypes {SetActiveTopNavigationByIdTypes from ./props/PageFrameWithDrawer.props.js}
 */
export const setActiveTopNavigationById = ({id, top}) => dispatch => {
  if (id && top) {
    const newTop = {...top};
    const topNavigationItems = get(newTop, 'navigation.items', []);
    const newTopNavigationItems = [];
    if (topNavigationItems && topNavigationItems.length > 0) {
      for (let i = 0; i < topNavigationItems.length; i++) {
        if (topNavigationItems[i].id === id) {
          newTopNavigationItems.push({...topNavigationItems[i], active: true});
        } else {
          newTopNavigationItems.push({...topNavigationItems[i], active: false});
        }
      }
      set(newTop, 'navigation.items', newTopNavigationItems);
    }
    dispatch({top: newTop});
  }
};

function setSelectedLeftNavigationItemsById(navigationItems, id) {
  let newNavigationItems = [];
  if (navigationItems && navigationItems.length > 0) {
    for (let i = 0; i < navigationItems.length; i++) {
      if (navigationItems[i].childrenItems && navigationItems[i].childrenItems.length > 0) {
        newNavigationItems.push({
          ...navigationItems[i],
          childrenItems: setSelectedLeftNavigationItemsById(navigationItems[i].childrenItems, id)
        });
      } else {
        if (navigationItems[i].id === id) {
          newNavigationItems.push({...navigationItems[i], selected: true});
        } else {
          newNavigationItems.push({...navigationItems[i], selected: false});
        }
      }
    }
  }
  return newNavigationItems;
}

/**
 * This function is generated by Webcodesk. Replace this comment with a valuable description.
 *
 * @functionTypes {SetSelectedLeftNavigationByIdTypes from ./props/PageFrameWithDrawer.props.js}
 */
export const setSelectedLeftNavigationById = ({id, left}) => dispatch => {
  if (id && left) {
    const newLeft = {...left};
    const leftNavigationItems = get(newLeft, 'navigation.items', []);
    if (leftNavigationItems.length > 0) {
      const newNavigationItems = setSelectedLeftNavigationItemsById(leftNavigationItems, id);
      set(newLeft, 'navigation.items', newNavigationItems);
      dispatch({ left: newLeft });
    }
  }
};

function toggleExpandLeftNavigationItemsById(navigationItems, id) {
  let newNavigationItems = [];
  if (navigationItems && navigationItems.length > 0) {
    for (let i = 0; i < navigationItems.length; i++) {
      if (navigationItems[i].childrenItems && navigationItems[i].childrenItems.length > 0) {
        let newNavigationItem = {
          ...navigationItems[i],
          childrenItems: setSelectedLeftNavigationItemsById(navigationItems[i].childrenItems, id)
        };
        if (navigationItems[i].id === id) {
          newNavigationItem.expanded = !newNavigationItem.expanded;
        }
        newNavigationItems.push(newNavigationItem);
      } else {
        newNavigationItems.push({...navigationItems[i]});
      }
    }
  }
  return newNavigationItems;
}
/**
 * This function is generated by Webcodesk. Replace this comment with a valuable description.
 *
 * @functionTypes {ToggleExpandLeftNavigationByIdTypes from ./props/PageFrameWithDrawer.props.js}
 */
export const toggleExpandLeftNavigationById = ({id, left}) => dispatch => {
  if (id && left) {
    const newLeft = {...left};
    const leftNavigationItems = get(newLeft, 'navigation.items', []);
    if (leftNavigationItems.length > 0) {
      const newNavigationItems = toggleExpandLeftNavigationItemsById(leftNavigationItems, id);
      set(newLeft, 'navigation.items', newNavigationItems);
      dispatch({ left: newLeft });
    }
  }
};


