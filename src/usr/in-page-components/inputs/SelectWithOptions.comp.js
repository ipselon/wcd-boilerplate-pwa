import uniqueId from 'lodash/uniqueId';
import React from 'react';
import InputLabel from '@material-ui/core/InputLabel';
import MenuItem from '@material-ui/core/MenuItem';
import FormHelperText from '@material-ui/core/FormHelperText';
import FormControl from '@material-ui/core/FormControl';
import SelectMUI from '@material-ui/core/Select';
import pickWithValues from 'usr/common-props/utils/pickWithValues';
import { SelectWithOptionsTypes } from './SelectWithOptions.props';

/**
 * SelectWithOptions is generated by Webcodesk. Replace this comment with a valuable description.
 */
class SelectWithOptions extends React.Component {

  constructor (props, context) {
    super(props, context);
    this.labelId = uniqueId('selectWithOptions');
    this.inputLabel = React.createRef();
    this.state = {
      selectedValueLocal: this.props.selectedValue,
      labelWidthLocal: 0
    };
  }

  componentDidMount () {
    const { variant } = this.props;
    if (variant === 'outlined' && this.inputLabel) {
      this.setState({
        labelWidthLocal: this.inputLabel.current.offsetWidth,
      });
    }
  }

  componentDidUpdate (prevProps, prevState, snapshot) {
    const { selectedValue, label, variant } = this.props;
    const { selectedValueLocal } = this.state;
    if (selectedValue !== prevProps.selectedValue && selectedValue !== selectedValueLocal) {
      this.setState({ selectedValueLocal: selectedValue });
    }
    if (label !== prevProps.label && variant === 'outlined' && this.inputLabel) {
      this.setState({
        labelWidthLocal: this.inputLabel.current.offsetWidth,
      });
    }
  }

  handleChange = e => {
    if (e) {
      e.stopPropagation();
      e.preventDefault();
    }
    this.setState({
      selectedValueLocal: e.target.value,
    });
    this.props.onChange({
      value: e.target.value
    });
  };

  render() {
    const {
      autoWidth,
      displayEmpty,
      variant,
      label: controlLabel,
      disabled,
      helperText,
      color,
      error,
      fullWidth,
      hiddenLabel,
      disableGuttersInOptions,
      denseOptions,
      margin,
      required,
      size,
      options
    } = this.props;
    const { selectedValueLocal, labelWidthLocal } = this.state;
    const muiFormControlProps = pickWithValues({ disabled, error, fullWidth, hiddenLabel, required });
    const muiSelectProps = pickWithValues({ autoWidth, displayEmpty });
    const optionsElements = [];
    if (options && options.length > 0) {
      let optionItem;
      for (let i = 0; i < options.length; i++) {
        optionItem = options[i];
        if (optionItem) {
          const { id, value, label, disabled } = optionItem;
          optionsElements.push(
            <MenuItem
              key={id ? id : `menuItem${i}`}
              value={value}
              disabled={!!disabled}
              disableGutters={!!disableGuttersInOptions}
              dense={!!denseOptions}
            >
              {label}
            </MenuItem>
          );
        }
      }
    }
    return (
      <FormControl
        variant={variant}
        color={color}
        margin={margin}
        size={size}
        {...muiFormControlProps}
      >
        {controlLabel && (<InputLabel id={this.labelId} ref={this.inputLabel}>{controlLabel}</InputLabel>)}
        <SelectMUI
          labelId={this.labelId}
          value={selectedValueLocal || ''}
          labelWidth={labelWidthLocal}
          {...muiSelectProps}
          onChange={this.handleChange}
        >
          {optionsElements}
        </SelectMUI>
        {helperText && (<FormHelperText>{helperText}</FormHelperText>)}
      </FormControl>
    );
  }
}

SelectWithOptions.propTypes = SelectWithOptionsTypes;

SelectWithOptions.defaultProps = {
  color: 'primary',
  fullWidth: true,
  margin: 'none',
  variant: 'standard',
  options: [
    {id: '0000', value: '', label: 'None'},
    {id: '0001', value: 'orange', label: 'Orange'},
    {id: '0002', value: 'blue', label: 'Blue'},
    {id: '0003', value: 'green', label: 'Green'}
  ],
  onChange: () => {
    console.info('SelectWithOptions.onChange is not set');
  }
};

export default SelectWithOptions;
